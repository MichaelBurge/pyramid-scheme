(include "psl.pmd")

(block-reentrancy-attacks)

(define PRIORITY-KING 0)
(define PRIORITY-DUKE 1)
(define PRIORITY-LORD 2)
(define PRIORITY-BARON 3)
(define PRIORITY-KNIGHT 4)
(define PRIORITY-PEASANT 5) ; Not sellable
(define PRIORITY-ENEMY 6) ; Not sellable
(define NUM-SELLABLE-PRIORITIES 5)

(define EVENT-SET-KING 0)
(define EVENT-ADD-DUKE 1)
(define EVENT-ADD-BARON 2)
(define EVENT-REMOVE-DUKE 3)
(define EVENT-REMOVE-BARON 4)
(define EVENT-BID-ACCEPTED 5)
(define EVENT-ASK-ACCEPTED 6)
(define EVENT-BALANCE-UPDATED 7)

; Most variables are stored in temporary memory
; These variables use permanent storage.
(with-allocator storage
  (define owner    (scalar (origin)))
  (define king     (scalar (origin)))
  (define dukes    (linked-list))
  (define barons   (linked-list))
  (define deposits (linked-list))
  (define balances (linked-list))
  (define cooldowns (linked-list))
  (define books    (vector-f NUM-SELLABLE-PRIORITIES (λ i (make-book))))
  )

; Return  Name & Args           Body
(exports
 (address get_creator           (read owner))
 (uint256 get_balance           (read (at balances (origin))))
 (uint256 get_priority          (user-priority (origin)))
 (void    deposit               (on-deposit (origin) (txn-amount)))
 (void    withdraw              (on-withdraw (origin))
 (void    (bid priority amount) (on-bid (origin) priority amount))
 (void    (ask amount)          (on-ask (origin) amount))
 (void    (cancel_orders)       (on-cancel (origin)))
 (void    (bless target)        (on-bless (origin) target))
 (void    extract               (on-extract))
 (void    suicide               (suicide! (read owner)))
 (void    '()                   (on-deposit (origin) (txn-amount))))

(define (on-deposit sender amount)
  (modify! (at deposits sender)
           (λ x (+ x amount))))

(define (on-withdraw sender) (withdraw-balance! sender))

(define (on-extract sender)
  (if (owner? sender)
      (on-withdraw-owner sender)
      (error "on-extract: Must be contract owner")))

(define (withdraw-owner! address) (withdraw! address (balance **contract**)))
(define (withdraw-balance! address) (withdraw! address (user-balance address)))
(define (on-cancel address)
  (cancel-bid-priority! address PRIORITY-KING)
  (cancel-bid-priority! address PRIORITY-DUKE)
  (cancel-bid-priority! address PRIORITY-LORD)
  (cancel-bid-priority! address PRIORITY-BARON)
  (cancel-bid-priority! address PRIORITY-KNIGHT)

  (cancel-ask-priority! address PRIORITY-KING)
  (cancel-ask-priority! address PRIORITY-DUKE)
  (cancel-ask-priority! address PRIORITY-LORD)
  (cancel-ask-priority! address PRIORITY-BARON)
  (cancel-ask-priority! address PRIORITY-KNIGHT)
  )

(define (cancel-bid-priority! address priority)
  (let ([ bids (book-bids (priority-book priority)) ])
    (withdraw! address (read (at bids address)))
    (delete-at! bids address)))


(define (cancel-ask-priority! address priority)
  (delete-at! (book-asks (priority-book priority))
              address))

; Transaction must deposit the difference between user's previous bid and this one.
(define (on-bid bidder priority amount)
  (let* ((book        (priority-book priority))
         (current-bid (book-user-bid book bidder)))
    (assert-deposit amount)
    (book-bid! book bidder amount)
    (withdraw! bidder current-bid)))
    
(define (on-ask asker amount)
  (let* ([priority (user-priority asker) ])
          [book (priority-book priority)])
    (book-ask! book asker amount)))

(define (on-bless source target)
  (assert-cooldown! source)
  (reset-cooldown! source)
  (cond ((king? source) (add-duke! target))
        ((lord? source) (add-baron! target))
        (else (error "on-bless: Unexpected source priority"))))

(define (owner? address) (eq? address (get owner)))
(define (balance? address) (assoc-member? balances address))
(define (priority-bid? priority address) (book-bid? (priority-book priority) address))

(define (priority-book priority) (read (at books priority)))

(define (set-king! target)
  (log1 target EVENT-SET-KING)
  (write! king target))

(define (add-duke! target)
  (log1 target EVENT-ADD-DUKE)
  (push dukes target))
  
(define (add-baron! target)
  (log1 target EVENT-ADD-BARON)
  (push barons target))

(define (remove-duke! target)
  (log1 target EVENT-REMOVE-DUKE)
  (delete dukes (eq? target)))

(define (remove-baron! target)
  (log1 target EVENT-REMOVE-BARON)
  (delete barons (eq? target)))

(define (transfer-priority! priority from to)
  (cond ((eq? priority PRIORITY-KING)   (transfer-priority-king! from to))
        ((eq? priority PRIORITY-DUKE)   (transfer-priority-duke! from to))
        ((eq? priority PRIORITY-LORD)   (transfer-priority-lord! from to))
        ((eq? priority PRIORITY-BARON)  (transfer-priority-baron! from to))
        ((eq? priority PRIORITY-KNIGHT) (transfer-priority-knight! from to))
        (else (error "transfer-priority!: Unknown priority"))))

(define (user-priority user)
  (cond ((king? user) PRIORITY-KING)
        ((duke? user) PRIORITY-DUKE)
        ((lord? user) PRIORITY-LORD)
        ((baron? user) PRIORITY-BARON)
        ((knight? user) PRIORITY-KNIGHT)
        ((peasant? user) PRIORITY-PEASANT)
        (else PRIORITY-ENEMY)))

(define (king? user) (eq? user (read king)))
(define (duke? user) (member? dukes user))
(define (lord? user) (l (maxby r deposits)))
(define (baron? user) (member? barons user))
(define (knight? user) (> (user-deposit user)
                          (eth 10)))
(define (peasant? user) (> (user-deposit user) 1))

(define (transfer-priority-king! from to)
  (set-king! to))

(define (transfer-priority-duke! from to)
  (remove-duke! from)
  (add-duke! to))

(define transfer-priority-lord! transfer-deposits!)

(define (transfer-priority-baron! from to)
  (remove-baron! from)
  (add-baron! to))

(define transfer-priority-knight! transfer-deposits!)

(define (transfer-deposits! from to)
  (let ((from-amount (read (at deposits from)))
        (to-amount   (read (at deposits to))))
    (write! (at deposits from) 0)
    (write! (at deposits to) (+ from-amount to-amount))))

(define (modify-balance! address f)
  (modify! (lookup balances address) f))

(define (reset-cooldown! address)
  (write! (at cooldowns address) (timestamp)))

(define (assert-cooldown! address)
  let ([ last-use (read (at cooldowns address)) ])
  (assert (>= (time-since last-use)
              (hours 24))))

(define (user-deposit user) (read (at deposits user)))

; Order book data structure
(define (on-match priority this bid ask)
  (log1 (l bid) EVENT-BID-ACCEPTED) ;; TODO: Log the entire bid
  (log1 (l ask) EVENT-ASK-ACCEPTED) ;; TODO: Log the entire ask
  (transfer-priority! priority (l ask) (l bid))
  (modify-balance! (l ask) (λ x (+ x (r ask))))
  )
(define (make-book) (pair (association-list) (association-list)))

(define (book-bids book) (l book))
(define (book-asks book) (r book))
  
(define (book-bid? book user) (member? book user))
(define (book-bid! book user amount)
  (assoc-insert! (book-bids book) user amount >)
  (try-cross-bid/ask! book))

(define (book-ask! book user amount)
  (assoc-insert! (book-bids book) user amount <)
  (try-cross-bid/ask! book))

(define (book-bid book) (peek-front (book-bids book)))
(define (book-ask book) (peek       (book-asks book)))

(define (book-pop-bid! book) (shift! (book-bids book)))
(define (book-pop-ask! book) (shift! (book-asks book)))

(define (try-cross-bid/ask! book)
  (let ((bid (book-bid book))
        (ask (book-ask book)))
    (if (> (r bid) (r ask))
        (begin
          (book-pop-bid! book)
          (book-pop-ask! book)
          (on-match book bid ask)
          )
        (void))))

    
