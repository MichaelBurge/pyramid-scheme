(require "primitives.pmd")

(define serialize serialize-fixnum)

(define (serialize-fixnum data)
  (assert (fixnum? data))
  (vector-singleton (unbox data)))
  
; EVM
(define (log1 data t1)
  (let ([bs (serialize data) ])
    (%-log1 bs t1)))


(define timestamp %-timestamp)
(define (time-since a) (- (%-timestamp) a))


; Utility

(define (void) (begin))

(define (assert x)
  (if x
      (void)
      (%-throw)))
(define (assert-equal a b) (assert (equal? a b)))
(define (assert-length xs n) (assert (>= (length xs) n)))

(define (circular f)
  (let ((this null))
    (set! this (f this))
    this))

(define (on f op) (λ (a b) (op (f a) (f b))))

(define (step-size n)
  (if (= n 0)
      1
      (* 1000 (step-size (- n 1)))))

(define (error x) (%-throw))

(define wei  aeth) ; 0 
(define kwei feth) ; 1
(define Mwei peth) ; 2
(define Gwei neth) ; 3
(define Twei µeth) ; 4
(define Pwei meth) ; 5
(define Ewei eth)  ; 6
(define (aeth n) (* n (step-size 0)))
(define (feth n) (* n (step-size 1)))
(define (peth n) (* n (step-size 2)))
(define (neth n) (* n (step-size 3)))
(define (µeth n) (* n (step-size 4)))
(define (meth n) (* n (step-size 5)))
(define (eth n)  (* n (step-size 6)))
(define (keth n) (* n (step-size 7)))

(define (seconds n)    n)
(define (minutes n) (* n 60))
(define (hours n)   (* n 3600))
(define (days n)    (* n (hours 24)))
(define (weeks n)   (* n (days 7)))
(define (months n)  (* n (days 30)))
(define (years n)   (* n (days 365)))
