(require "primitives.pmd")

; EVM Instructions
(define (log1 data t1) (undefined))

; Primitives
(define (apply proc args) (undefined))
(define pair prim-cons)
(define l prim-car)
(define r prim-cdr)
(define l! prim-set-car!)
(define r! prim-set-cdr!)

(define (vector x ...) (undefined))
(defmacro (λ args) `(lambda ,(first args) ,(second args)))
; Generators

(define (replicate n v) (undefined))
; modify! :: Container k v => k -> (v -> v) -> 
(define (modify! ref f)
  (write! ref (f (read ref))))

(define (member? ctr key) (undefined))
(define (find ctr pred) (undefined))
(define (try-get key on-find on-fail)
; Like find, but returns an at! reference
(define (find! ctr pred) (undefined))

(define (delete! ctr pred) (get (find! ctr pred)))
(define (delete-at! ctr key) (get (at! ctr key)))
(define (insert-sorted! ctr pred val) (undefined))
(define (lookup ctr key) (find ctr (lambda (x) (eq? (l x) key))))
(define (assoc-delete! ctr key) (undefined))
(define (assoc-update! ctr key value pred) (undefined))
(define (assoc-insert! ctr key value pred) (undefined))

(define (peek ctr)           (get (back ctr)))
(define (pop! ctr)           (get (back! ctr)))
(define (push! ctr value)    (set (back! ctr) value))
(define (peek-front ctr)     (get (front ctr)))
(define (shift! ctr)         (get (front! ctr)))
(define (unshift! ctr value) (set (front! ctr) value))
(define (1º ctr) (get (at ctr 0)))
(define (2º ctr) (get (at ctr 1)))\
(define first 1º)
(define second 2º)
(define (1º! ctr x) (set (at ctr 0) x))
(define (2º! ctr x) (set (at ctr 1) x))

; Utility
(define (curry2 f)
  (lambda (x)
    (lambda (y)
      (f x y))))

(define + (curry2 prim-+))
(define - (curry2 prim--))
(define * (curry2 prim-*))
(define / (curry2 prim-/))
(define % (curry2 prim-%))

(define (pred i) (- i 1))
(define (assert x) (undefined))
(define (assert-deposit) (undefined))
(define (void))

(define (circular f)
  (let ((this null))
    (set! this (f this))
    this))

(define (on f op) (λ (a b) (op (f a) (f b))))

; Contract
(define (withdraw! target amount) (undefined))
(define (suicide! target) (prim-suicide target))
(define **contract** (prim-address))
(define balance prim-balance)

(defmacro (let xs)
  (begin
    (assert-length xs 2)
    (let* ([args (first xs)]
           [body (tail xs)]
           [vars (map first args)]
           [exprs (map second args)])
      (cons `(lambda ,vars ,body) exprs))))

(defmacro (let* args)
  (begin
    (assert-length xs 2)
    (let ([args (first xs) ]
          [body (tail xs) ]
          [wrap-body (lambda (arg body)
                       `((lambda ,(l arg) ,body) ,(r arg)))]
          [wrap-args (lambda (args body)
                       (if (null? args)
                           body
                           (wrap-body (first args)
                                      (wrap-args (tail args) body))))]
          )
      (wrap-args args body))))
