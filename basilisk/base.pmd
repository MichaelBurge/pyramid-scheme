(require "primitives.pmd")

(define serialize serialize-fixnum)

(define (serialize-fixnum data)
  (assert (fixnum? data))
  (vector-singleton (unbox data)))
  
; EVM Instructions
(define (log1 data t1)
  (let ([bs (serialize data) ])
    (%-log1 bs t1)))

; Primitives
(define null %-null)

(define pair %-cons)
(define l %-car)
(define r %-cdr)
(define l! %-set-car!)
(define r! %-set-cdr!)

(define (vector xs)
  (let ([sz (length xs)]
        [vec (%-vector-new sz)])
    (copy-list->vector! vec 0 xs)))

(define (copy-list->vector! vec i xs)
  (if (null? xs)
      (void)
      (begin
        (%-vector-write! vec i (l xs))
        (copy-list->vector! vec (+ i 1) (r xs)))))

(define (vector-initialize! vec i sz f)
  (if (eq? sz 0)
      (void)
      (begin
        (%-vector-write! vec i (f))
        (%-vector-write-f! vec (+ i 1) f))))

(define (vector-f sz f)
  (let ([ vec (%-vector-new sz) ])
    (vector-initalize! vec 0 sz f)))

(define (vector-singleton x)
  (vector-f 1 (λ () x)))

(defmacro λ lambda)

; Utility
(define (curry2 f)
  (lambda (x)
    (lambda (y)
      (f x y))))

(define + (curry2 %-+))
(define - (curry2 %--))
(define * (curry2 %-*))
(define / (curry2 %-/))
(define % (curry2 %-%))

(define (pred i) (- i 1))
(define (assert x)
  (if x
      (void)
      (%-throw)))
(define (void) (begin))

(define (circular f)
  (let ((this null))
    (set! this (f this))
    this))

(define (on f op) (λ (a b) (op (f a) (f b))))

(defmacro (let xs)
  (begin
    (assert-length xs 2)
    (let* ([args (first xs)]
           [body (tail xs)]
           [vars (map first args)]
           [exprs (map second args)])
      (cons `(lambda ,vars ,body) exprs))))

(defmacro (let* args)
  (begin
    (assert-length xs 2)
    (let ([args (first xs) ]
          [body (tail xs) ]
          [wrap-body (lambda (arg body)
                       `((lambda ,(l arg) ,body) ,(r arg)))]
          [wrap-args (lambda (args body)
                       (if (null? args)
                           body
                           (wrap-body (first args)
                                      (wrap-args (tail args) body))))]
          )
      (wrap-args args body))))
