#lang pyramid

; The (asm) language primitive executes ordinary Racket code within the codegen.rkt module, where
; the cg-* helpers are defined.

; Helpers

(defmacro (intro-var v1 . fs)
  (list* 'asm
         `(save (op 'lookup-variable-value (const (quote ,v1)) (reg 'env)))
         (map (Î» (f) `(save (op ,f stack))) fs)))

(defmacro (make-arities)
  (define vs "abcdefghijklmnopqrstuvwxyz")
  (define (arity reads writes box-output? unbox-input?)
    (define uq 'unquote)
    (define qq 'quasiquote)
    (define (intro c) `(intro-var ,c ,@(maybe->list unbox-input? ''fixnum-value)))
    (define intros (reverse (for/list ([ c (in-string vs 0 reads) ])
                              (intro (string->symbol (string c))))))
    `(,qq (,@intros
           (asm (save (,uq x))
                ,@(maybe->list box-output? '(save (op 'make-fixnum stack)))
                ,@(maybe->list (equal? writes 1) `(restore 'val))))))
  `(begin               ;                    R W BO BI
     (defmacro (nullop x)            ,(arity 0 1 #t #t))
     (defmacro (nullop-unboxed x)    ,(arity 0 1 #f #f))
     (defmacro (nullproc x)          ,(arity 0 0 #f #f))
     (defmacro (unop x a)            ,(arity 1 1 #t #t))
     (defmacro (unproc x a)          ,(arity 1 0 #f #t))
     (defmacro (unop-boolean x a)    ,(arity 1 1 #f #t))
     (defmacro (unop-unboxed x a)    ,(arity 1 1 #f #f))
     (defmacro (binop x a b)         ,(arity 2 1 #t #t))
     (defmacro (binop-boolean x a b) ,(arity 2 1 #f #t))
     (defmacro (binop-unboxed x a b) ,(arity 2 1 #f #f))
     (defmacro (biproc x a b)        ,(arity 2 0 #f #t))
     (defmacro (triop x a b c)       ,(arity 3 1 #t #t))
     (defmacro (triproc x a b c)     ,(arity 3 0 #f #t))

     (defmacro (stackop x)           ,(arity 0 0 #f #f))
     ))

(make-arities)

; Primitives table
(define (%-+ a b)     (binop (evm 'ADD) a b))
(define (%-* a b)     (binop (evm 'MUL) a b))
(define (%-- a b)     (binop (evm 'SUB) a b))
(define (%-/ a b)     (binop (evm 'DIV) a b))
(define (%-mod a b)   (binop (evm 'MOD) a b))
(define (%-= a b)     (binop-boolean (evm 'EQ) a b))
(define (%-> a b)     (binop-boolean (evm 'GT) a b))
(define (%-< a b)     (binop-boolean (evm 'LT) a b))
(define (%->= a b)    (binop-boolean (evm 'GE) a b))
(define (%-<= a b)    (binop-boolean (evm 'LE) a b))
(define (%-ptr-= a b) (binop-unboxed (evm 'EQ) a b))
(define (%-suicide a) (unproc (evm 'SUICIDE) a))
(define (%-address)   (nullop (evm 'ADDRESS)  ))
(define (%-balance a) (unop   (evm 'BALANCE) a))
;; (define (%-log0-fixnum x)
;;   (asm (save (const 32)))          ; [ 32 ]
;;   (intro-var x)                    ; [ x ; 32 ]
;;   (asm (op 'add (const #x20) stack); [ x'; 32 ]
;;        (evm 'LOG0))                ; [ ]
;;   )
;; (define (%-log1 bs t)
;;   (intro-var t)                   ; [ t ]
;;   (intro-var bs)                  ; [ bs; t ]
;;   (asm (op 'DUP1)                 ; [ bs; bs; t ]
;;        (cg-vector-len stack)      ; [ len; bs; t ]
;;        (cg-swap 1)                ; [ bs; len; t ]
;;        (cg-vector-data stack)     ; [ data; len; t ]
;;        (op 'LOG1)                 ; [ ]
;;        )
;;   )

(define (%-origin)                (nullop (evm 'ORIGIN)))
(define (%-caller)                (nullop (evm 'CALLER)))
(define (%-callvalue)             (nullop (evm 'CALLVALUE)))
(define (%-calldataload data-ptr) (unop   (evm 'CALLDATALOAD) data-ptr))
(define (%-calldatasize)          (nullop (evm 'CALLDATASIZE)))
(define (%-calldatacopy mem-ptr data-ptr size)
                                  (triop  (evm 'CALLDATACOPY) mem-ptr data-ptr size))
(define (%-timestamp)             (nullop (evm 'TIMESTAMP)))

(define (%-tag a)            (unop    (op 'type stack) a))
(define (%-mem-alloc a)      (unop    (op 'allocate stack) a))
(define (%-mem-read a b)     (binop   (op 'read-memory stack stack) a b))
(define (%-mem-write! a b c) (triproc (op 'write-memory stack stack stack) a b c))
(define (%-store-read a)     (unop    (evm 'SLOAD) a))
(define (%-store-write! a b) (biproc  (evm 'SSTORE) a b))
(define (%-box a)            (unop    (op 'make-fixnum stack)   a))
(define (%-unbox a)          (unop    (op 'fixnum-value stack) a))
(defmacro (%-bool->fixnum a)
  `(begin
     ,a
     (asm (save (op 'cg-make-fixnum (reg 'val)))
          (restore 'val))
     ))

(define (%-throw) (nullproc (evm 'REVERT)))

(define (%-call gas to value in-offset in-size out-offset out-size)
  (intro-var out-size   'fixnum-value)
  (intro-var out-offset 'fixnum-value)
  (intro-var in-size    'fixnum-value)
  (intro-var in-offset  'fixnum-value)
  (intro-var value      'fixnum-value)
  (intro-var to         'fixnum-value)
  (intro-var gas        'fixnum-value)
  (asm (evm (op 'CALL)))
  (func-save))

(define %-TAG-FIXNUM 0)
(define %-TAG-SYMBOL 1)
(define %-TAG-COMPILED-PROCEDURE 2)
(define %-TAG-DEFINE-PROCEDURE 3)
(define %-TAG-PAIR   4)
(define %-TAG-VECTOR 5)
(define %-TAG-NIL    6)

(define %-MEM-ENV            #x20)
(define %-MEM-PROC           #x40)
(define %-MEM-CONTINUE       #x60)
(define %-MEM-ARGL           #x80)
(define %-MEM-VAL            #xa0)
(define %-MEM-NIL            #xc0)
(define %-MEM-ALLOCATOR      #xe0)
(define %-MEM-DYNAMIC-START #x100)

; Runtime support
(define (%-pair a b) (binop-unboxed (op 'pair stack stack) a b))

(define (%-left x) (unop-unboxed (op 'left stack) x))

(define (%-right x) (unop-unboxed (op 'right stack) x))

(define (%-null? x) (unop-unboxed (op 'null? stack) x))
(define (%-null) (nullop-unboxed (op 'null)))

(defmacro (%-call-with-current-continuation f)
  `(begin (define cont (asm (cg-save-continuation)))
          (,f cont)
          (asm (cg-write-reg (reg 'val) (reg 'argl)))
          ))
