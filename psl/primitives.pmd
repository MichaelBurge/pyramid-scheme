; The (asm) language primitive executes ordinary Racket code within the codegen.rkt module, where
; the cg-* helpers are defined.

; Helpers

(defmacro (intro-var v1 . f)
  (list* 'asm
         `(op-lookup-variable-value (const (quote ,v1)) (reg 'env))
         (if (null? f)
             null
             (list `(,(car f) stack))
             )))

(defmacro (func-return)
  `(asm
    (cg-write-reg (reg 'val) stack)
    (cg-goto (reg 'continue))))

(defmacro (%-nullop xs)
  `(begin
     (asm ,xs (cg-make-fixnum stack))
     (func-return)
     ))

(defmacro (%-unop xs v1)
  `(begin
     (intro-var ,v1 cg-unbox-integer) ; [ v1 ]
     (asm ,xs (cg-make-fixnum stack))    ; [ result ]       
     (func-return)
    ))

(defmacro (%-binop xs v1 v2)
  `(begin
     (intro-var ,v2 cg-unbox-integer) ; [v2]
     (intro-var ,v1 cg-unbox-integer) ; [v1;v2]
     (asm ,xs (cg-make-fixnum stack)) ; [result]
     (func-return)                    ; [ ]
    ))

(defmacro (%-binop-boolean xs v1 v2)
  `(begin
     (intro-var ,v2 cg-unbox-integer) ; [v2]
     (intro-var ,v1 cg-unbox-integer) ; [v1;v2]
     (asm ,xs)                        ; result
     (func-return
      )))

(defmacro (%-binop-unboxed xs v1 v2)
  `(begin
     (intro-var ,v2) ; [v2]
     (intro-var ,v1) ; [v1;v2]
     (asm ,xs)       ; [result]
     (func-return)
     ))

(defmacro (%-triop xs v1 v2 v3)
  `(begin
     (intro-var ,v2 cg-unbox-integer) ; [v2]
     (intro-var ,v1 cg-unbox-integer) ; [v1;v2]
     (asm ,xs (cg-make-fixnum stack))   ; [result]
     (func-return)                    ; [ ]
     ))
  
; "True" Primitives
(define (%-+ a b)     (%-binop  (op 'ADD) a b))
(define (%-* a b)     (%-binop  (op 'MUL) a b))
(define (%-- a b)     (%-binop  (op 'SUB) a b))
(define (%-/ a b)     (%-binop  (op 'DIV) a b))
(define (%-mod a b)   (%-binop  (op 'MOD) a b))
(define (%-= a b)     (%-binop-boolean  (op 'EQ ) a b))
(define (%-> a b)     (%-binop-boolean  (op 'GT ) a b))
(define (%-< a b)     (%-binop-boolean  (op 'LT ) a b))
(define (%-ptr-= a b) (%-binop-unboxed (op 'EQ) a b))
(define (%-suicide a) (%-unop   (asm 'SUICIDE) a))
(define (%-address)   (%-nullop (asm 'ADDRESS)  ))
(define (%-balance a) (%-unop   (asm 'BALANCE) a))
(define (%-log1 bs t)
  (intro-var t)                   ; [ t ]
  (intro-var bs)                  ; [ bs; t ]
  (asm (op 'DUP1)                 ; [ bs; bs; t ]
       (cg-vector-len stack)      ; [ len; bs; t ]
       (cg-swap 1)                ; [ bs; len; t ]
       (cg-vector-data stack)     ; [ data; len; t ]
       (op 'LOG1)                 ; [ ]
       (cg-goto (reg 'continue))) ; [ ]
  )

(define (%-origin)       (%-nullop (op 'ORIGIN)))
(define (%-caller)       (%-nullop (op 'CALLER)))
(define (%-callvalue)    (%-nullop (op 'CALLVALUE)))
(define (%-calldataload a) (%-unop (op 'CALLDATALOAD) a))
(define (%-timestamp)    (%-nullop (op 'TIMESTAMP)))

(define (%-tag a)            (%-unop  (cg-tag stack) a))
(define (%-mem-alloc a)      (%-unop  (cg-allocate stack) a))
(define (%-mem-read a b)     (%-binop (cg-read-address-offset stack stack) a b))
(define (%-mem-write! a b c) (%-triop (cg-write-address-offset stack stack stack) a b c))
(define (%-store-read a)     (%-unop  (op 'SLOAD) a))
(define (%-store-write! a b) (%-binop (op 'SSTORE) a b))
(define (%-box a)   (%-unop (cg-make-fixnum stack)   a))
(define (%-unbox a) (%-unop (cg-unbox-integer stack) a))

(define (%-throw) (%-nullop (op 'REVERT)))

(define (%-call gas to value in-offset in-size out-offset out-size)
  (intro-var out-size   cg-unbox-integer)
  (intro-var out-offset cg-unbox-integer)
  (intro-var in-size    cg-unbox-integer)
  (intro-var in-offset  cg-unbox-integer)
  (intro-var value      cg-unbox-integer)
  (intro-var to         cg-unbox-integer)
  (intro-var gas        cg-unbox-integer)
  (asm (op 'CALL))
  (func-return))

(define %-TAG-FIXNUM 0)
(define %-TAG-SYMBOL 1)
(define %-TAG-COMPILED-PROCEDURE 2)
(define %-TAG-DEFINE-PROCEDURE 3)
(define %-TAG-PAIR   4)
(define %-TAG-VECTOR 5)
(define %-TAG-NIL    6)

(define %-MEM-ENV            #x20)
(define %-MEM-PROC           #x40)
(define %-MEM-CONTINUE       #x60)
(define %-MEM-ARGL           #x80)
(define %-MEM-VAL            #xa0)
(define %-MEM-NIL            #xc0)
(define %-MEM-ALLOCATOR      #xe0)
(define %-MEM-DYNAMIC-START #x100)
