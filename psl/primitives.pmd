#lang pyramid

(require psl "compatibility.pmd")

; Helpers

(defmacro (%#-unreachable) `(%#-throw))

(define-syntax (intro-var stx)
  (syntax-case stx ()
    [(_ v1 f ...)
     #'(asm (save (op 'lookup-variable-value (const 'v1) (reg 'env)))
            (save (op f stack)) ...)]
    ))

(define-syntax (nullproc stx)
  (syntax-case stx ()
    [(_ body) #'(asm body)]
    ))

(define-syntax (nullop stx)
  (syntax-case stx ()
    [(_ body) #'(asm (save body)
                     (restore 'val))]
    ))


(define-syntax (unop stx)
  (syntax-case stx ()
    [(_ body) #`(begin (intro-var a)
                       (asm (save body)
                            (restore 'val)))]
    ))

(define-syntax (binop stx)
  (syntax-case stx ()
    [(_ body) #`(begin (intro-var b)
                       (intro-var a)
                       (asm (save body)
                            (restore 'val)))]
    ))

(define-syntax (biproc stx)
  (syntax-case stx ()
    [(_ body) #`(begin (intro-var b)
                       (intro-var a)
                       (asm (perform body)))]
    ))

(define-syntax (triproc stx)
  (syntax-case stx ()
    [(_ body) #'(begin (intro-var c)
                       (intro-var b)
                       (intro-var a)
                       (asm (perform body)))]
    ))

; Primitives table

(define (%#-not a)     (unop  (evm 'ISZERO)))
(define (%#-+ a b)     (binop (evm 'ADD)))
(define (%#-* a b)     (binop (evm 'MUL)))
(define (%#-- a b)     (binop (evm 'SUB)))
(define (%#-u/ a b)    (binop (evm 'DIV)))
(define (%#-u% a b)    (binop (evm 'MOD)))
(define (%#-= a b)     (binop (evm 'EQ)))
(define (%#-u> a b)    (binop (evm 'GT)))
(define (%#-u< a b)    (binop (evm 'LT)))
(define (%#-u>= a b)   (%#-not (%#-u< a b)))
(define (%#-u<= a b)   (%#-u>= b a))
(define (%#-s> a b)    (binop (evm 'SGT)))
(define (%#-s< a b)    (binop (evm 'SLT)))
(define (%#-s>= a b)   (%#-not (%#-s< a b)))
(define (%#-s<= a b)   (%#-s>= b a))
(define (%#-exp a b)   (binop (evm 'EXP)))
(define (%#-and a b)   (binop (evm 'AND)))
(define (%#-or a b)    (binop (evm 'OR)))
(define (%#-xor a b)   (binop (evm 'XOR)))
(define (%#-negate a)  (unop (evm 'NOT)))
(define (%#-bitshiftl a b)
  (%#-* a (%#-exp #u2 b)))
(define (%#-bitshiftr a b)
  (%#-u/ a (%#-exp #u2 b)))

(define (%-log0-fixnum x)
  (asm (save (const 32)))                  ; [ 32 ]
  (intro-var x)                            ; [ x ; 32 ]
  (asm (save (op 'add (const #x20) stack)) ; [ x'; 32 ]
       (evm 'LOG0))                         ; [ ]
  )
(define (%-log1 bs t)
  (intro-var t)                            ; [ t ]
  (intro-var bs)                           ; [ bs; t ]
  (asm (evm 'DUP1)                         ; [ bs; bs; t ]
       (save (op 'add (const #x20) stack)) ; [ len; bs; t ]
       (evm 'SWAP1)                        ; [ bs; len; t ]
       (save (op 'add (const #x40) stack)) ; [ data; len; t ]
       (evm 'LOG1)                         ; [ ]
       )
  )

(define (%#-log1 ptr len t)
  (intro-var t)   ; [ t ]
  (intro-var len) ; [ len; t ]
  (intro-var ptr) ; [ ptr; len; t ]
  (asm (evm 'LOG1))
  )

(define (%#-log2 ptr len t1 t2)
  (intro-var t2)
  (intro-var t1)
  (intro-var len)
  (intro-var ptr)
  (asm (evm 'LOG2))
  )

(define (%#-tag a)             (unop (op 'type stack)))
(define (%#-box a)             (unop (op 'make-fixnum stack)))
(define (%#-unbox-fixnum a)    (unop (op 'fixnum-value stack)))
(define (%#-unbox-character a) (unop (op 'character-value stack)))
(define (%#-unbox-symbol a)    (unop (op 'symbol-value stack)))

(define (%#-word->pointer a)   (unop (op 'word->pointer stack)))
(define (%#-mem-alloc a)       (unop (op 'allocate stack)))
(define (%#-mem-read a b)      (binop (op 'read-memory stack stack)))
(define (%#-mem-write! a b c)  (triproc (op 'write-memory stack stack stack)))

(define (%#-sstore a b)     (biproc (evm 'SSTORE)))
(define (%#-sload a)        (unop   (evm 'SLOAD)))
(define (%#-caller)         (nullop (evm 'CALLER)))
(define (%#-balance a)      (unop   (evm 'BALANCE)))
(define (%#-address)        (nullop (evm 'ADDRESS)))
(define (%#-calldataload a) (unop   (evm 'CALLDATALOAD)))
(define (%#-callvalue)      (nullop (evm 'CALLVALUE)))

(defmacro (%#-mem-alloc-init a . xs)
  `((Î» ()
      (define ptr (%#-mem-alloc ,a))
      ,@(for/list ([ x xs ]
                   [ n (in-naturals)])
          `(%#-mem-write! ptr (unbox ,n) ,x))
      ptr)))

(define (%#-vector-read a b) (binop (op 'read-vector stack stack)))

(define (%#-vector-write! a b c) (triproc (op 'write-vector stack stack stack)))

(defmacro (%#-bool->word x)
  `(begin ,x
          (asm (save (op 'bool->unboxed (reg 'val)))
               (restore 'val))
          ))

(defmacro (%#-coerce-word x)
  `(begin ,x
          (asm (save (op 'any->unboxed (reg 'val)))
               (restore 'val))
          ))

(defmacro (%#-bool->fixnum a)
  `(begin
     ,a
     (asm (save (op 'bool->unboxed (reg 'val)))
          (save (op 'make-fixnum stack))
          (restore 'val))
     ))

(defmacro (%#-throw-error sym)
  `(begin (%#-ioctl-print-symbol ,(unwrap-quote sym))
          (%#-throw)))

(define (%#-throw) (nullproc (evm 'REVERT)))

(define (%-call gas to value in-offset in-size out-offset out-size)
  (intro-var out-size   'fixnum-value)
  (intro-var out-offset 'fixnum-value)
  (intro-var in-size    'fixnum-value)
  (intro-var in-offset  'fixnum-value)
  (intro-var value      'fixnum-value)
  (intro-var to         'fixnum-value)
  (intro-var gas        'fixnum-value)
  (asm (evm (op 'CALL))
       (save (op 'make-fixnum stack))
       (restore 'val)))

(define %#-TAG-FIXNUM              #u0)
(define %#-TAG-SYMBOL              #u1)
(define %#-TAG-COMPILED-PROCEDURE  #u2)
(define %#-TAG-PRIMITIVE-PROCEDURE #u3)
(define %#-TAG-PAIR                #u4)
(define %#-TAG-VECTOR              #u5)
(define %#-TAG-NIL                 #u6)
(define %#-TAG-CONTINUATION        #u7)
(define %#-TAG-FRAME               #u8)
(define %#-TAG-ENVIRONMENT         #u9)
(define %#-TAG-CHARACTER           #u10)
(define %#-TAG-BYTES               #u11)

(define %#-MEM-ENV            (unbox #x20))
(define %#-MEM-PROC           (unbox #x40))
(define %#-MEM-CONTINUE       (unbox #x60))
(define %#-MEM-ARGL           (unbox #x80))
(define %#-MEM-VAL            (unbox #xa0))
(define %#-MEM-NIL            (unbox #xc0))
(define %#-MEM-ALLOCATOR      (unbox #xe0))
(define %#-MEM-DYNAMIC-START  (unbox #x100))

(define %#-WORD (unbox #x20))

; Runtime support
(define (%#-symbol?    x) (%#-= (%#-tag x) %#-TAG-SYMBOL))
(define (%#-fixnum?    x) (%#-= (%#-tag x) %#-TAG-FIXNUM))
(define (%#-character? x) (%#-= (%#-tag x) %#-TAG-CHARACTER))

(define (%#-pair a b) (binop (op 'pair stack stack)))
(define (%#-left a)   (unop (op 'left stack)))
(define (%#-right a)  (unop (op 'right stack)))
(define (%#-null? a)  (unop (op 'null? stack)))
(define (%#-null)     (nullop (op 'null)))

(defmacro (%#-call-with-current-continuation f)
  `(begin (define cont (asm
                        (save (op 'save-continuation))
                        (restore 'val)))
          (,f cont)
          ))

; Common utilities
(define (%#-memcpy to from size-bytes)
  (define size-words (%#-bytes->words size-bytes))
  (define (loop n)
    (if (%#-u>= n size-words)
        to
        (begin (%#-mem-write! to n (%#-mem-read from n))
               (loop (%#-+ n #u1)))))
  (loop (unbox 0)))

(define (%#-bytes->words x)
  (define base (%#-u/ x %#-WORD))
  (if (%#-= (%#-u% x %#-WORD) #u0)
      base
      (%#-+ base #u1))
  )

(define (%#-unbox a)
  (if (%#-fixnum?    a) (%#-unbox-fixnum    a)
  (if (%#-character? a) (%#-unbox-character a)
  (if (%#-symbol?    a) (%#-unbox-symbol    a)
                        (%#-throw-error '%#-unbox)))))

; ioctl debug helpers

(define (%#-allocate-word x)
  (intro-var x)
  (asm (save (op 'allocate (const 32)))
       (restore 'val))
  (asm (save (op 'any->unboxed stack)))
  (asm (perform (op 'write-memory (reg 'val) (const 0) stack)))
  )

(define (%#-ioctl-print-word x)
  (define ptr (%#-allocate-word x))
  (%#-log2 ptr #u32 #u0 #u0)
  )

(define (%#-ioctl-print-symbol x)
  (define ptr (%#-allocate-word x))
  (%#-log2 ptr #u32 #u0 #u1)
  )

; Compile-time macros

(define-syntax (%#-set-max-iterations! stx)
  (syntax-case stx ()
    [(_ n) (set-max-iterations! (syntax->integer #'n))]
    )
  #'(begin)
  )

(define-syntax (%-with-lexical-named-value stx)
  (syntax-case stx ()
    [(_ key value x) (with-lexical #'key #'value #'x)]))

(defmacro (%-lexical-value key)
  ((lexical-parameter (unwrap-quote key)))
  )

; Bytes
(define (%#-words->bytes words)
  (%#-* %#-WORD words))

(define (%#-ptr-offset ptr os)
  (%#-+ ptr (%#-words->bytes os)))

(define (%#-read-memory-range src-ptr num-bytes)
  (define total-num-words (%#-bytes->words (%#-+ num-bytes (%#-words->bytes #u2))))
  (define bytes-ptr (%#-mem-alloc-init total-num-words %#-TAG-BYTES num-bytes))
  (%#-memcpy (%#-ptr-offset bytes-ptr #u2) src-ptr num-bytes)
  bytes-ptr
  )
