#lang pyramid

(require psl "primitives.pmd")
(require psl "syntax.pmd")
(require psl "arith.pmd")

; Primitives
(define null (%-null))
(define null? %-null?)

(define fixnum %-box)

; (fixnum? x) implies x = (fixnum (unbox x))
; (symbol? x) implies x = (symbol (unbox x))
(define unbox %-unbox)

(define pair %-pair)
(define l %-left)
(define r %-right)

(defmacro (list . xs)
  (define (loop lst)
    (if (null? xs)
        '(%-null)
        `(pair ,(car lst) (list ,@(cdr lst)))))
  (loop xs))

(defmacro (%-lift-binop op a b)
  `(box (,op (unbox ,a) (unbox ,b))))

(defmacro (%-lift-boolop op a b)
  `(,op (unbox ,a) (unbox ,b)))

(define (+ a b) (%-lift-binop %#-+ a b))
(define (* a b) (%-lift-binop %#-* a b))
(define (- a b) (%-lift-binop %#-- a b))
(define (/ a b) (%-lift-binop %#-u/ a b))
(define (mod a b) (%-lift-binop %#-u% a b))

(define (= a b) (%-lift-boolop %#-= a b))
(define (> a b) (%-lift-boolop %#-u> a b))
(define (< a b) (%-lift-boolop %#-u< a b))
(define (>= a b) (%-lift-boolop %#-u>= a b))
(define (<= a b) (%-lift-boolop %#-u<= a b))
