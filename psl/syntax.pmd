(defmacro (let args . body)
  (let* ([vars (map first args)]
         [exprs (map second args)])
    (cons `(lambda ,vars ,(make-begin body)) exprs)))

(defmacro (let* args . body)
  (letrec ([ wrap-body (lambda (arg . body)
                         `((lambda ,(first arg) (begin ,@body)) ,(second arg)))]
           [ wrap-args (lambda (args . body)
                         (if (null? args)
                             body
                             (wrap-body (first args)
                                        (wrap-args (cdr args) body))))])
    (wrap-args args body)
    ))

(defmacro (static id expr)
  (let* ([ is (minicompile expr) ]
         [ lb (make-label id) ]
         [ sym (label-name lb) ]
         )
    (%-register-patchpoint! sym is)
    `(define ,id (asm (label (quote ,sym) ,2)
                      (op 'PUSH32)
                      (bytes 32 0)
                      (cg-make-fixnum stack)
                      (cg-write-reg (reg 'val) stack)))))
