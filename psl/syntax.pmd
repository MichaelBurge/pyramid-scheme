#lang pyramid

(require psl "runtime.pmd")

(defmacro (let args . body)
  (let* ([vars (map first args)]
         [exprs (map second args)])
    (cons `(位 ,vars (begin ,@body)) exprs)))

(defmacro (let* args . body)
  (letrec ([ wrap-body (位 (arg body)
                         `((位 ,(first arg) ,body)
                           ,(second arg)))]
           [ wrap-args (位 (args body)
                         (if (null? args)
                             body
                             (wrap-body (first args)
                                        (wrap-args (cdr args) body))))])
    (wrap-args args `(begin ,@body))
    ))

(define-syntax (static stx)
  (syntax-case stx ()
    [(_ id expr)
     (let* ([ is (minicompile #'expr) ]
            [ lb (make-label (syntax-e #'id)) ]
            [ sym (label-name lb) ]
            )
       (%-register-patchpoint! sym is)
       #`(define id (asm (evm (label (quote #,sym) 2)
                              (op 'PUSH32)
                              (bytes 32 0))
                         (save (op 'make-fixnum stack))
                         (restore 'val))))]
    ))

(define (void) (begin))
(defmacro (when pred . body)
  `(if ,pred
       (begin ,@body)
       (void)))

(define (for f lst)
  (define (loop xs)
    (if (null? xs)
        (void)
        (begin (f (l xs))
               (loop (r xs)))))
  (loop lst))

(define (call/cc f)
  (%#-call-with-current-continuation f))

(defmacro (syntax-fold f . xs)
  (match xs
    ['() (error "syntax-fold: must have at least 1 element")]
    [(list x) x]
    [(list-rest x rest) `(,f ,x (syntax-fold ,f ,@rest))]
    ))

(defmacro (generic-case pred e . xs)
  (define value-e (gensym 'case))
  (define (loop xs)
    (match xs
      ['()                      '(void)]
      [(cons `(else ,body) '()) body]
      [(cons `((,x) ,body) xs)
       `(if (,pred ,value-e ,x)
            ,body
            ,(loop xs))]
      ))
  `(begin (define ,value-e ,e) ; (define) are hoisted to the parent's continuation frame
          ,(loop xs))
  )

(defmacro (%#-case e . xs)
  `(generic-case %#-= ,e ,@xs))

(defmacro (cond . cases)
  (match cases
    ['() '(%-unreachable)]
    [`((else ,x)) x]
    [`((,pred ,cons) . ,rest) `(if ,pred ,cons (cond ,@rest))]
    ))

(define-syntax (or stx)
  (syntax-case stx ()
    [(_) #'false]
    [(_ x) #'x]
    [(_ x xs ...) #`(if x
                        true
                        (or xs ...))]
    ))

(define-syntax (and stx)
  (syntax-case stx ()
    [(_) #'true]
    [(_ x) #'x]
    [(_ x xs ...) #`(if x
                        (and xs ...)
                        false)]
    ))
