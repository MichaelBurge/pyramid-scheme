#lang pyramid

(require psl "runtime.pmd")

(defmacro (let args . body)
  (let* ([vars (map first args)]
         [exprs (map second args)])
    (cons `(位 ,vars (begin ,@body)) exprs)))

(defmacro (let* args . body)
  (letrec ([ wrap-body (位 (arg body)
                         `((位 ,(first arg) ,body)
                           ,(second arg)))]
           [ wrap-args (位 (args body)
                         (if (null? args)
                             body
                             (wrap-body (first args)
                                        (wrap-args (cdr args) body))))])
    (wrap-args args `(begin ,@body))
    ))

(defmacro (static id expr)
  (let* ([ is (minicompile expr) ]
         [ lb (make-label id) ]
         [ sym (label-name lb) ]
         )
    (%-register-patchpoint! sym is)
    `(define ,id (asm (evm (label (quote ,sym) ,2)
                           (op 'PUSH32)
                           (bytes 32 0))
                      (save (op 'make-fixnum stack))
                      (restore 'val)))
    ))

(define (void) (begin))
(defmacro (when pred . body)
  `(if ,pred
       (begin ,@body)
       (void)))

(define (for f lst)
  (define (loop xs)
    (if (null? xs)
        (void)
        (begin (f (l xs))
               (loop (r xs)))))
  (loop lst))

(define (call/cc f)
  (%-call-with-current-continuation f))
